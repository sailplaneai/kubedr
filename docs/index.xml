<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KubeDoctor â€“ Documentation</title><link>http://kubedr.ai/docs/</link><description>Recent content in Documentation on KubeDoctor</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 02 Mar 2023 15:43:09 -0800</lastBuildDate><atom:link href="http://kubedr.ai/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Overview</title><link>http://kubedr.ai/docs/overview/</link><pubDate>Thu, 06 Apr 2023 09:49:12 -0700</pubDate><guid>http://kubedr.ai/docs/overview/</guid><description>
&lt;p>KubeDr is a CLI that uses AI to troubleshoot and fix Kubernetes and Cloud problems.&lt;/p>
&lt;p>KubeDr uses a technique called &lt;a href="https://arxiv.org/abs/2304.02195">&amp;ldquo;Scientific Debugging,&amp;rdquo;&lt;/a> to
generate the following&lt;/p>
&lt;ul>
&lt;li>A hypothesis about why a problem is occuring&lt;/li>
&lt;li>A prediction that can be used to test whether the hypothesis is true&lt;/li>
&lt;li>An experiment to test the prediction&lt;/li>
&lt;/ul>
&lt;p>After generating a hypothesis, prediction, and experiment, KubeDr will ask for permission to run the experiment. Based on the experiment&amp;rsquo;s output
KubeDr will evaluate the prediction and hypothesis. KubeDr will then use that information
to either generate new hypotheses, predictions, and experiments or draw a conclusion about the
source of the problem.&lt;/p>
&lt;p>KubeDr&amp;rsquo;s prior knowledge about Cloud and Kubernetes can be augmented with runbooks. A
&lt;a href="https://github.com/jlewi/kubedr/tree/main/runbooks">runbook&lt;/a> is just a YAML file
containing tuples of (hypothesis, prediction, experiment). KubeDr can automatically
generate these YAML files from your existing runbooks.&lt;/p>
&lt;h2 id="why-use-kubedr">Why Use KubeDr?&lt;/h2>
&lt;p>Infrastructure, platform, and app teams confront the growing complexity of Cloud &amp;amp; Kubernetes on a daily basis.
This complexity makes it very difficult for a single engineer to fully understand a company&amp;rsquo;s stack and not
just the layer they work on daily. This problem is particular acute when trying to diagnose a problem
whose root cause may be in a different part of the stack.&lt;/p>
&lt;p>KubeDr solves this problem by using AI to synthesis information and generate troubleshooting
steps that can operate across the stack. KubeDr automates troubleshooting reducing toil
and time to problem resolution.&lt;/p>
&lt;h2 id="who-is-kubedr-for">Who is KubeDr for?&lt;/h2>
&lt;p>&lt;strong>Infrastructure engineers&lt;/strong> who deal with Kubernetes and Cloud on a daily basis. KubeDr can
help infrastructure engineers quickly debug and fix these issues.&lt;/p>
&lt;p>&lt;strong>Platform teams&lt;/strong> who want to provide their customers with tools to diagnose and fix problems with the platform.&lt;/p>
&lt;p>&lt;strong>App teams&lt;/strong> who need help troubleshooting with Cloud/Kubernetes or their internal developer platform.&lt;/p>
&lt;h2 id="where-should-i-go-next">Where should I go next?&lt;/h2>
&lt;p>Follow the &lt;a href="http://kubedr.ai/docs/getting_started/">Getting Started&lt;/a> guide to download and use KubeDr.&lt;/p></description></item><item><title>Docs: Getting Started</title><link>http://kubedr.ai/docs/getting_started/</link><pubDate>Thu, 06 Apr 2023 09:49:12 -0700</pubDate><guid>http://kubedr.ai/docs/getting_started/</guid><description>
&lt;p>Follow the instructions below to get started with KubeDr&lt;/p>
&lt;h2 id="download-kubedr">Download KubeDr&lt;/h2>
&lt;ol>
&lt;li>Download the latest release from the &lt;a href="https://github.com/jlewi/kubedr/releases">releases page&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="download-weaviate">Download Weaviate&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Download the latest release of &lt;a href="https://weaviate.io/">weaviate&lt;/a> from the &lt;a href="https://github.com/weaviate/weaviate/releases">releases page&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ensure the weaviate binary is on your path and accessible as &lt;code>weavate&lt;/code>&lt;/p>
&lt;ul>
&lt;li>KubeDr runs weaviate locally in order to index and query runbooks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="configure-kubedr">Configure KubeDr&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>If you don&amp;rsquo;t already have an OpenAI API key visit &lt;a href="https://openai.com/">https://openai.com/&lt;/a> to
obtain one&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Configure kubedr to use your OpenAI API Key&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr config set apiKeyFile=/path/to/your/api.key.file
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>api.key.file&lt;/code> should be a text file containing your OpenAI APIKey&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="diagnose-a-problem">Diagnose a problem&lt;/h2>
&lt;p>You can diagnose a problem using the &lt;strong>diagnose&lt;/strong> command&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr diagnose problem ${PROBLEM}
&lt;/code>&lt;/pre>&lt;p>${PROBLEM} should be a natural language description of the problem you want to diagnose. Here are some examples&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;service account esp-echo in namespace sampleapp can&amp;rsquo;t access GCS buckets&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;network traffic can&amp;rsquo;t reach the service esp-echo in namespace sampleapp&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>It is important to write clear problem descriptions. Here are some tips&lt;/p>
&lt;ul>
&lt;li>
&lt;p>For a problem dealing with a Kubernetes resource include the following information&lt;/p>
&lt;ul>
&lt;li>Type of resource&lt;/li>
&lt;li>Namespace of resource&lt;/li>
&lt;li>Name of resource&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>For a problem dealing with a Google Cloud resource include the following information&lt;/p>
&lt;ul>
&lt;li>Type of resource&lt;/li>
&lt;li>Project of resource&lt;/li>
&lt;li>Zone or region of resource (if applicable)&lt;/li>
&lt;li>Name of resource&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>kubedr will respond with a hypothesis, prediction, and experiment. kubedr will
ask for confirmation to run the experiment. Type &lt;code>yes&lt;/code> to run the experiment&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr will
Use the scientific method to determine if network traffic can access the service named hydros in namespace hydros. Say &amp;#39;Everything looks good&amp;#39; if no problems can be found.
kubedr is thinking...
Hypothesis: The Kubernetes Service &amp;#34;hydros&amp;#34; might not be properly set up in the &amp;#34;hydros&amp;#34; namespace, causing network traffic to be unable to access the service.
Prediction: If the Service &amp;#34;hydros&amp;#34; is correctly configured and functioning correctly, the command &amp;#39;kubectl -n hydros get service hydros&amp;#39; should return information about the service.
Experiment: Run the following command - &amp;#39;kubectl -n hydros get service hydros&amp;#39; to check if the service exists and is properly set up in the namespace.
kubedr would like to execute the following command:
kubectl -n hydros get service hydros
Do you want to run the command (yes/no)[no]: yes
&lt;/code>&lt;/pre>&lt;p>kubedr will run the experiment and then analyze the results and do one of the following&lt;/p>
&lt;ul>
&lt;li>If kubedr has reached a conclusion it will provide the conclusion and exit&lt;/li>
&lt;li>Generate a new hypothesis, prediction, and experiment to futher diagnose the issue&lt;/li>
&lt;/ul>
&lt;h2 id="where-should-i-go-next">Where should I go next?&lt;/h2>
&lt;ul>
&lt;li>The &lt;a href="http://kubedr.ai/docs/examples/">Examples&lt;/a> guide contains examples of different problems and how to troubleshoot them with KubeDr.&lt;/li>
&lt;li>Learn more about &lt;a href="http://kubedr.ai/docs/runbooks/">Runbooks&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Examples</title><link>http://kubedr.ai/docs/examples/</link><pubDate>Thu, 06 Apr 2023 09:49:12 -0700</pubDate><guid>http://kubedr.ai/docs/examples/</guid><description>
&lt;p>This page provides examples of troubleshooting various problems using KubeDr.&lt;/p>
&lt;p>You will need access to a Kubernetes cluster in order to deploy the example
resources. If you don&amp;rsquo;t have a Kubernetes cluster refer to the
&lt;a href="https://kubernetes.io/docs/setup/">Kubernetes Documentation&lt;/a> to learn about
the many ways to run Kubernetes.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Clone the &lt;a href="https://github.com/jlewi/kubedr">kubedr&lt;/a> repository to obtain
the Kubernetes manifests&lt;/p>
&lt;pre tabindex="0">&lt;code>git clone https://github.com/jlewi/kubedr git_kubedr
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>If you haven&amp;rsquo;t already indexed the &lt;a href="https://github.com/jlewi/kubedr/tree/main/runbooks">predefined runbooks&lt;/a>
index them now as the examples depend on them&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr index dir git_kubedr/runbooks
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Indexing a runbook is an idempotent operation so running the above operation is a null op if you&amp;rsquo;ve already indexed the runbooks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Create the namespace &lt;code>kubedr-examples&lt;/code> as that&amp;rsquo;s used by the examples.&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl create namespace kubedr-examples
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="networking-example">Networking Example&lt;/h2>
&lt;p>Networking is arguably one of the most easily misconfigured things since it often involves multiple layers (e.g. Cloud loadbalancers, service mesh, application configuration).&lt;/p>
&lt;p>In this example we deploy a simple echo service and then troubleshoot why traffic can&amp;rsquo;t reach it.&lt;/p>
&lt;p>Deploy the application.&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl apply -f ${REPO}/examples/service_labels/manifests.yaml
&lt;/code>&lt;/pre>&lt;p>Verify that the pods are deployed.&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl get pods
No resources found in autobuilder namespace.
kubectl -n kubedr-examples get pods
NAME READY STATUS RESTARTS AGE
esp-echo-764cfbb49c-k68dq 1/1 Running 0 39s
&lt;/code>&lt;/pre>&lt;p>Try to port-forward to the service and verify that traffic isn&amp;rsquo;t getting through&lt;/p>
&lt;p>Setup port-forwarding&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl -n kubedr-examples port-forward service/esp-echo 8080:80
&lt;/code>&lt;/pre>&lt;p>Now try to send a curl request&lt;/p>
&lt;pre tabindex="0">&lt;code>curl localhost:8080/hello
curl: (7) Failed to connect to localhost port 8080 after 3 ms: Connection refused
&lt;/code>&lt;/pre>&lt;p>Since the request is failing lets use KubeDr to diagnose the problem&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr diagnose problem &amp;#34;Why can&amp;#39;t network traffic reach the service esp-echo in namespace kubedr-examples&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Every troubleshooting session is different but typically kubedr will run through some combination of the following steps&lt;/p>
&lt;ul>
&lt;li>Issuing the command &lt;code>kubectl -n kubedr-examples get svc esp-echo -o yaml&lt;/code> to check the service&lt;/li>
&lt;li>Checking for matching pods by doing &lt;code>kubectl -n kubedr-examples get pods -l app=echo -o jsonpath=&amp;quot;{.items[*].status.phase}&amp;quot;&lt;/code>&lt;/li>
&lt;li>Issuing the command &lt;code>kubectl -n kubedr-examples describe svc esp-echo&lt;/code> to check for any pods&lt;/li>
&lt;li>Issuing the command &lt;code>kubectl -n kubedr-examples get deployment -l app=echo -o yaml&lt;/code> to check for deployments matching the selector&lt;/li>
&lt;/ul>
&lt;p>A typical conclusion might look like the following&lt;/p>
&lt;pre tabindex="0">&lt;code>The problem is that there is no Deployment available for the &amp;#39;esp-echo&amp;#39; service in the &amp;#39;kubedr-examples&amp;#39; namespace. Consequently, no pods are running that could handle the network traffic directed to the &amp;#39;esp-echo&amp;#39; service. You would need to create a Deployment that correctly selects the &amp;#39;esp-echo&amp;#39; service based on labels and ensures that the necessary pods are running.
&lt;/code>&lt;/pre>&lt;p>In this case KubeDr correctly determines that the problem is that there are no deployments available because the service&amp;rsquo;s selector and deployment&amp;rsquo;s labels don&amp;rsquo;t match.&lt;/p>
&lt;h2 id="workload-identity-example">Workload Identity Example&lt;/h2>
&lt;p>Create the service account.&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl apply -f examples/workload_identity.yaml
&lt;/code>&lt;/pre>&lt;p>Now we can use KubeDr to diagnose problems with workload identity.&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr diagnose problem &amp;#34;why can&amp;#39;t service account esp-echo in namespace kubedr-examples access GCS buckets&amp;#34;
&lt;/code>&lt;/pre>&lt;p>kubedr will typically do the following&lt;/p>
&lt;ul>
&lt;li>Fetch the service account to check for the workload identity annotation &lt;code>iam.gke.io/gcp-service-account&lt;/code>&lt;/li>
&lt;li>Get the desired GCP service account from the &lt;code>iam.gke.io/gcp-service-account&lt;/code>&lt;/li>
&lt;li>Try to fetch the IAM service account&lt;/li>
&lt;/ul>
&lt;p>Based on this, kubedr will conclude that the service account is missing and possibly suggest a command to fix it by creating the service account.&lt;/p>
&lt;p>To further explore using Kubedr you can try creating the service account and fixing this problem. This will only work if you have permission to
create service accounts.&lt;/p>
&lt;pre tabindex="0">&lt;code>gcloud iam service-accounts create kubedr-example --description=&amp;#34;Service Account for KubeDr examples&amp;#34; --display-name=&amp;#34;kubedr-example&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Update the service account to use the newly created service account&lt;/p>
&lt;pre tabindex="0">&lt;code>kubect -n kubedr-examples edit serviceaccount esp-echo
&lt;/code>&lt;/pre>&lt;p>Set the value of the annotation &lt;code>iam.gke.io/gcp-service-account&lt;/code> to &lt;code>kubedr-example@${PROJECT}.iam.gserviceaccount.com&lt;/code>. Be sure to
substitute in the name of your project for $PROJECT.&lt;/p>
&lt;p>Now rerun kubedr&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr diagnose problem &amp;#34;why can&amp;#39;t service account esp-echo in namespace kubedr-examples access GCS buckets&amp;#34;
&lt;/code>&lt;/pre>&lt;p>kubedr should correctly determine that the GCP service account exists but is missing the correct rolebinding to
allow the Kubernetes service account to assume its identity.&lt;/p>
&lt;h2 id="cleanup">Cleanup&lt;/h2>
&lt;p>After you are done trying out KubeDr its a good idea to delete the namespace to cleanup any examples you created.&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl delete namespace
&lt;/code>&lt;/pre></description></item><item><title>Docs: Runbooks</title><link>http://kubedr.ai/docs/runbooks/</link><pubDate>Thu, 06 Apr 2023 09:49:12 -0700</pubDate><guid>http://kubedr.ai/docs/runbooks/</guid><description>
&lt;p>This page describes how to create and index runbooks. Runbooks allow you to customize the agent
for your infrastructure.&lt;/p>
&lt;h2 id="what-is-a-runbook">What is a Runbook&lt;/h2>
&lt;p>A runbook is a YAML file providing tuples of (hypothesis, prediction, experiment) which can
be used to troubleshoot various problems. An example is shown below&lt;/p>
&lt;pre tabindex="0">&lt;code>apiVersion: kubedr.ai/v1alpha1
kind: RunBook
metadata:
name: iam
namespace: gke
entries:
- hypothesis: The service account&amp;#39;s IAM roles are missing the desired permissions
prediction: The Google Cloud IAM Role ${ROLE} doesn&amp;#39;t include permission ${PERMISSION}
experiment: Run `gcloud iam roles describe roles/${ROLE}` and check whether the desired permission is missing
- hypothesis: The kubernetes service account doesn&amp;#39;t have the requested permissions because workload identity is not enabled on the cluster
prediction: The workload identity pool isn&amp;#39;t set on the cluster
experiment: Run `gcloud container clusters describe ${CLUSTER_NAME} --location=${REGION} --format=&amp;#34;value(workloadIdentityConfig.workloadPool)`
references:
- https://cloud.google.com/kubernetes-engine/docs/troubleshooting/troubleshooting-security#workload-identity
&lt;/code>&lt;/pre>&lt;p>More examples of runbooks can be found in the &lt;a href="https://github.com/jlewi/kubedr/tree/main/runbooks">kubedr repository&lt;/a>.&lt;/p>
&lt;p>The YAML file is intended to be an intermediary format into which your runbooks and documentation can be converted so
as to be understood by Kube Doctor.&lt;/p>
&lt;p>In the future Kube Doctor will help you automatically generate these YAML files from your existing runbooks and documentation.
For now you have to manually author them.&lt;/p>
&lt;h2 id="index-the-runbooks">Index the runbooks&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>To index a directory containing one or more run the &lt;code>index dir&lt;/code> command.&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr index dir ${DIRECTORY}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>This will recourse over the directory and process any YAML files containing Runbooks&lt;/li>
&lt;li>Indexing a runbook is an idempotent operation so running the above operation is a null op if you&amp;rsquo;ve already indexed the runbooks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Verify the runbooks were indexed&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr index list &amp;lt;runbooks | goalbooks&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>This command should output a table listing all the tuples (hypothesis, prediction, experiment) kubedr has indexed&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>+--------------------------------------+--------------+------------+--------------------------------+---------------------------------------------------------------------+-------------------------------------------------------+
| ID | NAME | NAMESPACE | HYPOTHESIS | PREDICTION | EXPERIMENT |
+--------------------------------------+--------------+------------+--------------------------------+---------------------------------------------------------------------+-------------------------------------------------------+
| 1569347c-855c-38a6-34bd-d5964b61a4c4 | iam-0 | gke | The service account&amp;#39;s IAM | The Google Cloud IAM Role | Run `gcloud iam roles describe |
| | | | roles are missing the desired | ${ROLE} doesn&amp;#39;t include | roles/${ROLE}` and check |
| | | | permissions | permission ${PERMISSION} | whether the desired permission |
| | | | | | is missing |
| 1675ddd2-5c30-a8fe-9875-d656c720912b | iam-1 | gke | The kubernetes service account | The workload identity pool | Run `gcloud container clusters describe |
| | | | doesn&amp;#39;t have the requested | isn&amp;#39;t set on the cluster | ${CLUSTER_NAME} --location=${REGION} |
| | | | permissions because workload | | --format=&amp;#34;value(workloadIdentityConfig.workloadPool)` |
| | | | identity is not enabled on the | | |
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol></description></item><item><title>Docs: AI Safety</title><link>http://kubedr.ai/docs/safety/</link><pubDate>Thu, 06 Apr 2023 09:49:12 -0700</pubDate><guid>http://kubedr.ai/docs/safety/</guid><description>
&lt;p>KubeDR has two different mechanisms to ensure it uses tools safely and doesn&amp;rsquo;t perform destructive actions.&lt;/p>
&lt;ul>
&lt;li>Human approval of actions&lt;/li>
&lt;li>IAM and RBAC&lt;/li>
&lt;/ul>
&lt;p>By default KubeDR relies on human review of all actions. While this is safe, it creates a burden
on the human operator. Furthermore, by preventing KubeDR from operating autonomously we limit KubeDR
to operating at the speed of the human operator.&lt;/p>
&lt;p>The second approach is to rely on IAM and RBAC to restrict the actions KubeDR can take. Relying
on IAM and RBAC makes it easy to reason about the potential impact of KubeDR actions. If KubeDR
is sufficiently restricted you may deem KubeDR sufficiently safe to operate autonomously.&lt;/p>
&lt;p>This document explains how to restrict KubeDR using IAM and RBAC for various tools.&lt;/p>
&lt;h2 id="kubectl">kubectl&lt;/h2>
&lt;p>To restrict KubeDR&amp;rsquo;s Kubernetes privileges we rely on &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">RBAC&lt;/a>.
We create a &lt;a href="manifests/kubedr_rbac.yaml">service account&lt;/a> to be used to execute &lt;code>kubectl&lt;/code>. This service account is then bound to a
&lt;a href="manifests/kubedr_rbac.yaml">ClusterRole&lt;/a> to grant KubeDR permissions sufficient for troubleshooting.&lt;/p>
&lt;p>Follow the steps below to restrict KubeDR&amp;rsquo;s privileges when running kubectl.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a copy of &lt;a href="manifests.kubedr_rbac.yaml">kubedr_rbac.yaml&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Edit the &lt;strong>kubedr-readonly&lt;/strong> ClusterRole as desired&lt;/p>
&lt;ul>
&lt;li>This role is designed to give KubeDR readonly access to Kubernetes so that it can troubleshoot problems but not make changes&lt;/li>
&lt;li>You may want to remove the ability to read secrets if you rely on secrets and are worried about exfiltration of secrets&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>(Optionally) replace the &lt;strong>ClusterRoleBinding&lt;/strong> with one or more &lt;strong>RoleBindings&lt;/strong> if you only want KubeDR to have access to certain namespaces.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Apply the manifests&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl apply -f kubedr_rbac.yaml
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Edit your &lt;code>${HOME}/.kubedr/config.yaml&lt;/code> to include a kubectl section like the one below&lt;/p>
&lt;pre tabindex="0">&lt;code>...
tools:
kubectl:
serviceAccount:
name: kubedr
namespace: kubedr
autoRun: false
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>If you changed the name or namespace of the serviceAccount be sure to set it correctly in your account&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Run KubeDR as you normally would&lt;/p>
&lt;ul>
&lt;li>KubeDR will use the &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-request-v1/">TokenRequest API&lt;/a> to obtain a token for the service account and then use it to run &lt;code>kubectl&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>If you want to run without human confirmation you can set &lt;strong>autoRun&lt;/strong> to true in &lt;code>${HOME}/.kubedr/config.yaml&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>...
tools:
kubectl:
serviceAccount:
name: kubedr
namespace: kubedr
autoRun: true
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://simonwillison.net/2023/Apr/14/worst-that-can-happen/">Blog on AI Safety By Simon Willson&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://simonwillison.net/2023/Apr/14/worst-that-can-happen/">Prompt injection: What&amp;rsquo;s the worst that can happen?&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Assistant</title><link>http://kubedr.ai/docs/assist/</link><pubDate>Thu, 06 Apr 2023 09:49:12 -0700</pubDate><guid>http://kubedr.ai/docs/assist/</guid><description>
&lt;p>This page describes how to use KubeDR to assist you with various tasks.&lt;/p>
&lt;h2 id="ask-kubedr-for-assistance">Ask KubeDR for assistance&lt;/h2>
&lt;p>To ask KubeDR for assistance with a task you use the assist sub-command&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr assist &amp;lt;task or question&amp;gt;
&lt;/code>&lt;/pre>&lt;p>For example, if you are using &lt;a href="https://fluxcd.io/">flux&lt;/a> for GitOps we might use
kubedr to determine the latest release has been successfully applied.&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl assist &amp;#34;Are flux applied resources up to date in namespace sampleapp?&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Or we might ask for help with kubectl&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl assist &amp;#34;What GKE cluster is the Kubernetes config using?&amp;#34;
&lt;/code>&lt;/pre>&lt;h2 id="goalbooks">GoalBooks&lt;/h2>
&lt;p>KubeDR can be tought how to perform various actions using GoalBooks.
GoalBooks are very similar to &lt;a href="http://kubedr.ai/docs/runbooks">runbooks&lt;/a>. A GoalBook is a
YAML file providing tuples of (thought, goal, action) which can
be used to accomplish various actions.&lt;/p>
&lt;pre tabindex="0">&lt;code>apiVersion: kubedr.ai/v1alpha1
kind: GoalBook
metadata:
name: kubectl
namespace: kubectl
entries:
- thought: In order to get information about the kubernetes context we need to know the current-context
goal: Get the current-context by running `kubectl config current-context` this will return the name of the current context
action: Run `kubectl config current-context`
- thought: To get the current kubernetes cluster we can run `kubectl config get-contexts` and parse the line with the current context. The current selected context will be marked with a `*`
goal: Get the current kubernetes cluster by running `kubectl config view get-contexts` and extract the cluster column.
action: Run `kubectl config get-contexts`
&lt;/code>&lt;/pre>&lt;p>More examples of GoalBooks can be found in the &lt;a href="https://github.com/jlewi/kubedr/tree/main/runbooks">kubedr repository&lt;/a>.&lt;/p>
&lt;p>The YAML file is intended to be an intermediary format into which your runbooks and documentation can be converted so
as to be understood by Kube Doctor.&lt;/p>
&lt;p>In the future Kube Doctor will help you automatically generate these YAML files from your existing runbooks and documentation.
For now you have to manually author them.&lt;/p></description></item><item><title>Docs: Configuration</title><link>http://kubedr.ai/docs/configuration/</link><pubDate>Thu, 06 Apr 2023 09:49:12 -0700</pubDate><guid>http://kubedr.ai/docs/configuration/</guid><description>
&lt;h2 id="weaviate">Weaviate&lt;/h2>
&lt;p>By default KubeDR will launch a subprocess to run weaviate. However, if you want to run
Weaviate manually you can configure KubeDR by setting the url of your weaviate instance&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr config set dbConfig.url=&amp;#34;http://WEAVIATE_HOST:PORT&amp;#34;
&lt;/code>&lt;/pre></description></item><item><title>Docs: Logging</title><link>http://kubedr.ai/docs/logging/</link><pubDate>Thu, 06 Apr 2023 09:49:12 -0700</pubDate><guid>http://kubedr.ai/docs/logging/</guid><description>
&lt;p>This page describes how to customize KubeDR&amp;rsquo;s logging.&lt;/p>
&lt;h2 id="filesystem">Filesystem&lt;/h2>
&lt;p>By default KubeDR creates a new timestampped file containing the logs each time it is invoked.
You can configure the directory where these files are stored by setting &lt;code>logging.logDir&lt;/code>
in &lt;code>${HOME}/.kubedr/config.yaml&lt;/code> e.g.&lt;/p>
&lt;pre tabindex="0">&lt;code>logging:
logDir: /path/to/log/directory
&lt;/code>&lt;/pre>&lt;h2 id="google-cloud-logging">Google Cloud Logging&lt;/h2>
&lt;p>If you have a GCP account you can configure KubeDR to write logs to
&lt;a href="https://cloud.google.com/logging">Google Cloud Logging&lt;/a>&lt;/p>
&lt;h3 id="enabling-cloud-logging">Enabling Cloud Logging&lt;/h3>
&lt;p>To enable Cloud Logging edit your &lt;code>${HOME}/.kubedr/config.yaml&lt;/code>
to set &lt;code>project&lt;/code> to the GCP project you want to log to. e.g.&lt;/p>
&lt;pre tabindex="0">&lt;code>logging:
gcp:
project: &amp;lt;YOUR PROJECT&amp;gt;
&lt;/code>&lt;/pre>&lt;p>You must have the role &lt;a href="https://cloud.google.com/iam/docs/understanding-roles#logging-roles">roles/logging.logWriter&lt;/a>
in order to write logs to the project.&lt;/p>
&lt;p>KubeDR uses &lt;a href="https://cloud.google.com/docs/authentication/application-default-credentials">application default credentials(ADC)&lt;/a> to access Google Cloud Logging.
You must set ADC by running the command below&lt;/p>
&lt;pre tabindex="0">&lt;code>gcloud auth application-default login
&lt;/code>&lt;/pre>&lt;h3 id="accessing-cloud-logs">Accessing Cloud Logs&lt;/h3>
&lt;p>Once you have enabled Cloud Logging all KubeDR logs will be streamed
to Cloud Logging. Each run is tagged with a unique TraceID which is
stored in the labels of each log entry. This can be used to fetch
the logs for a particular run using a query like the following.&lt;/p>
&lt;pre tabindex="0">&lt;code>labels.source=&amp;#34;kubedr&amp;#34;
labels.traceid=&amp;#34;9e0010be-49e5-11ee-96c4-6ea4a1656548&amp;#34;
resource.labels.project_id=&amp;#34;chat-acme&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Be sure to set the correct values of &lt;code>traceid&lt;/code> and &lt;code>project_id&lt;/code>.&lt;/p>
&lt;p>KubeDR will print out the link for the logs at the start of its run
for easy access.&lt;/p>
&lt;h4 id="console-messages">Console Messages&lt;/h4>
&lt;p>In order to filter the logs to what was shown to the user
you can add &lt;code>jsonPayload.console=&amp;quot;true&amp;quot;&lt;/code> to your query e.g.&lt;/p>
&lt;pre tabindex="0">&lt;code>labels.source=&amp;#34;kubedr&amp;#34;
labels.traceid=&amp;#34;9e0010be-49e5-11ee-96c4-6ea4a1656548&amp;#34;
resource.labels.project_id=&amp;#34;chat-acme&amp;#34;
jsonPayload.console=&amp;#34;true&amp;#34;
&lt;/code>&lt;/pre></description></item><item><title>Docs: Troubleshooting</title><link>http://kubedr.ai/docs/troubleshooting/</link><pubDate>Thu, 06 Apr 2023 09:49:12 -0700</pubDate><guid>http://kubedr.ai/docs/troubleshooting/</guid><description>
&lt;h2 id="timeout-waiting-for-weaviate-client-to-connect-to-db">Timeout waiting for weaviate client to connect to DB&lt;/h2>
&lt;p>When KubeDR runs it will block waiting to establish a connection to the Weaviate database.
While it is waiting it will show messages like the following.&lt;/p>
&lt;pre tabindex="0">&lt;code>2023/09/05 16:52:04 Weaviate not yet up. Waiting for another second.
2023/09/05 16:52:05 Weaviate not yet up. Waiting for another second.
&lt;/code>&lt;/pre>&lt;p>If it is unable to connect it will eventually timeout with an error like the following&lt;/p>
&lt;pre tabindex="0">&lt;code>Error starting weaviate weaviate did not start up in 1m0s. Either the Weaviate URL &amp;#34;http://127.0.0.1:53912/v1&amp;#34; is wrong or Weaviate did not start up in the interval given in &amp;#39;startupTimeout&amp;#39;
&lt;/code>&lt;/pre>&lt;p>There are two possible causes. There is already a weaviate process running and this is
preventing KubeDR from starting a new weaviate process.&lt;/p>
&lt;p>To check for such processes run &lt;code>ps -ef | grep weaviate&lt;/code> e.g&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt;ps -ef | grep weaviate
501 97365 716 0 4:51PM ttys001 0:01.28 weaviate --scheme=http --port 52889
&lt;/code>&lt;/pre>&lt;p>Kill the running process by running&lt;/p>
&lt;pre tabindex="0">&lt;code>pkill -x weaviate
&lt;/code>&lt;/pre>&lt;p>The other possible cause is that you set &lt;code>dbConfig.url&lt;/code> to point to an existing instance of weaviate but aren&amp;rsquo;t
actually running weaviate at that URL. To check your configuration you can run&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr config get
&lt;/code>&lt;/pre>&lt;p>If &lt;code>dbConfig.url&lt;/code> is set to a non empty string there are two possible ways to fix the connection issue&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Unset &lt;code>dbConfig.url&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>kubedr config set dbConfig.url=&amp;#34;&amp;#34;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>unsetting it will cause kubedr to launch weaviate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Start weaviate at the URL you set&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="weaviate-error-unable-to-resolve-node-name-to-host">Weaviate Error Unable to Resolve node name to host&lt;/h2>
&lt;p>When running KubeDR you get an error like the following&lt;/p>
&lt;pre tabindex="0">&lt;code>explorer: get class: vector search: object vector search at index goals: remote shard 2a4JrhIUoDS4: resolve node name &amp;#34;some.host.name&amp;#34; to host
Failed to query runbook entries
&lt;/code>&lt;/pre>&lt;p>This is an issue with Weaviate not obtaining a stable hostname (refer to the &lt;a href="https://weaviate.io/developers/weaviate/more-resources/migration-guide#why-is-a-data-migration-necessary">docs&lt;/a>).&lt;/p>
&lt;p>You can fix this by configuring KubeDR to explicitly set the name through the environment variable &lt;code>CLUSTER_HOSTNAME&lt;/code>.
Edit &lt;code>${HOME}/.kubedr/config.yaml&lt;/code> and set the environment variable in the &lt;code>DBCONFIG&lt;/code> section e.g.&lt;/p>
&lt;pre tabindex="0">&lt;code>apiVersion: &amp;#34;&amp;#34;
kind: &amp;#34;&amp;#34;
dbConfig:
path: &amp;#34;&amp;#34;
url: &amp;#34;&amp;#34;
env:
- name: CLUSTER_HOSTNAME
value: some.host.name
...
&lt;/code>&lt;/pre>&lt;p>Set the value to the value in the error message.&lt;/p>
&lt;p>&lt;strong>Important&lt;/strong> Since KubeDR is starting Weaviate in a subprocess simply setting &lt;code>CLUSTER_HOSTNAME&lt;/code> in your environment won&amp;rsquo;t work.&lt;/p></description></item></channel></rss>